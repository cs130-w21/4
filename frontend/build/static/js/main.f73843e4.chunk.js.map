{"version":3,"sources":["use-auth.js","login.js","use-core.js","search-bar.js","contact-list.js","mpn_logo.png","navigation-bar.js","filter-bar.js","loading-page.js","home.js","authentication-routing.js","App.js","reportWebVitals.js","index.js"],"names":["auth","username","password","fetch","method","headers","body","JSON","stringify","then","response","json","catch","err","status","userObject","authContext","createContext","ProvideAuth","children","useState","user","setUser","login","logout","didLogout","refresh","register","didRegister","useProvideAuth","Provider","value","useAuth","useContext","Login","props","setUsername","setPassword","showMenu","setShowMenu","handleLogin","evt","a","preventDefault","console","log","handleRegisterUser","onSubmit","type","name","placeholder","onChange","target","handleShowMenu","RegisterUserMenu","show","onHide","onRegister","rest","first","setFirst","last","setLast","email","setEmail","Modal","size","aria-labelledby","centered","Header","closeButton","Title","id","Body","InputGroup","FormControl","core","contactObject","alert","coreContext","ProvideCore","coreObject","setCoreObject","getCore","addContact","didAdd","updateContact","didUpdate","deleteContact","didDelete","useProvideCore","useCore","SearchBar","input","setKeyword","class","className","e","FullContact","classname","this","phoneNumber","company","dateMet","dateLastInteracted","schoolAttended","notes","React","Component","Name","toggleClass","setState","active","state","onClick","ToggleButtonGroupControlled","setVal","contacts","networkObject","setInput","searchTerm","setSearchTerm","updateInput","filtered","filter","contact","toLowerCase","includes","trim","ToggleButtonGroup","defaultValue","ToggleButton","variant","checked","map","cont","i","key","ContactList","NavBar","handleLogout","alt","src","logo","Button","Filterbar","firstname","setFirstname","lastname","setLastname","phone","setPhone","setCompany","role","setRole","date","setDate","school","setSchool","setNotes","setShow","handleClose","clearFields","handleSubmit","addContactObj","ButtonToolbar","ButtonGroup","DropdownButton","title","Dropdown","Item","href","Form","Group","Control","as","rows","Footer","LoadingPage","Home","loading","setLoading","useEffect","retrieveCore","AuthenticationRouting","refreshPage","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f73843e4.chunk.js","sourcesContent":["import React, {\n  useState,\n  useContext,\n  createContext\n} from \"react\";\n\n// this auth can be replaced with anything that provides the same API\n// could be extracted to separate file\nconst auth = {\n  user: null,\n  async login(username, password) {\n    // send request to backend\n    let response = await fetch(\"/api/login\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Credentials': 'include'\n      },\n      body: JSON.stringify({username, password})\n    })\n    .then(response => response.json())\n    .catch(err => {\n      if (err.status === 401) {\n        return null;\n      }\n    });\n\n    // should be userObject\n    return response;\n  },\n  async logout() {\n    let response = await fetch(\"/api/logout\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Credentials': 'include'\n      }\n    })\n    .then(response => {\n      if (response.status === 200) {\n        return true;\n      }\n      else {\n        return false;\n      }\n    })\n    .catch(err => {\n      if (err.status === 500) {\n        return false;\n      }\n      return false;\n    });\n\n    return response;\n  },\n  async refresh() {\n    let response = await fetch(\"/api/core\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Credentials': 'include'\n      }\n    })\n    .then(response => response.json())\n    .catch(err => {\n      if (err.status === 401) {\n        return null;\n      }\n      return null;\n    });\n\n    return response;\n  },\n  async register(userObject) {\n    let response = await fetch('/api/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Credentials': 'include'\n      },\n      body: JSON.stringify(userObject)\n    })\n    .then(response => {\n      if (response.status === 200) {\n        return true;\n      }\n      else {\n        return false;\n      }\n    })\n    .catch(err => {\n      if (err.status === 401) {\n        return false;\n      }\n      return false;\n    });\n\n    return response;\n  }\n}\n\nconst authContext = createContext();\n\n/**\n * @return returns the authentication required\n * for login, logout, session cookies, etc\n *\n * purpose: to get the authentication object which is needed\n * to allow the user to enter and use the web app\n */\nexport function ProvideAuth({ children }) {\n  const auth = useProvideAuth();\n\n  return (\n    <authContext.Provider value={auth}>\n      { children }\n    </authContext.Provider>\n  );\n}\n\nexport const useAuth = () => {\n  return useContext(authContext);\n};\n\n/**\n * @return returns the response from the login attempt, or\n * null if the attempt was successful.\n *\n * purpose: to use the authentication object to allow the\n * user to login to the web app\n */\nfunction useProvideAuth() {\n\n  const [user, setUser] = useState(null);\n\n  /**\n   * @param username - user's username, attained from user input\n   * within the login page\n   * @param password - user's password, attained from user input\n   * within the login page\n   * @return the result of the login or null if the login was unsuccessful\n   *\n   * Purpose: to allow a registered user access to their personal network\n   */\n  const login = (username, password) => {\n    return auth.login(username, password)\n    .then(response => {\n      if (response === null) {\n        return null;\n      }\n\n      setUser(response)\n      return response;\n    })\n  };\n\n  /**\n   * @return logout promise\n   *\n   * Purpose: to log the user out which will then\n   * allow another, or the same user, to log in again\n   */\n  const logout = ()  => {\n    return auth.logout()\n    .then(didLogout => {\n      if (didLogout) {\n        setUser(null);\n      }\n      else {\n        // do something maybe??\n      }\n\n      return didLogout;\n    });\n  };\n\n  const refresh = () => {\n    return auth.refresh()\n    .then(response => {\n      if (response === null) {\n        return null;\n      }\n\n      setUser(response.userObject);\n      return response;\n    });\n  };\n\n  const register = (userObject) => {\n    return auth.register(userObject)\n    .then(didRegister => {\n      if (didRegister) {\n        setUser(userObject);\n      }\n\n      return didRegister;\n    });\n  }\n\n  return {\n    user,\n    login,\n    logout,\n    refresh,\n    register\n  };\n}\n","import React, {\n  useState\n} from \"react\";\n\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\n\nimport { useAuth } from \"./use-auth.js\"\n\n/**\n * @param props\n * @return returns the rendering of the login page (a submit buttons and\n * 2 input forms; one for username, one for password.\n * @constructor\n *\n * Purpose: to collect the user's login credentials via\n * the input form, then send said credentials to use-auth.js\n * to verify thus allowing the user to login & view their\n * personal network (given their credentials are correct)\n */\nexport default function Login(props) {\n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showMenu, setShowMenu] = useState(false);\n\n  const auth = useAuth();\n\n  const handleLogin = async (evt) => {\n    evt.preventDefault();\n    let response = await auth.login(username, password);\n    if (response) {\n        // nothing for now\n    }\n\n    // TODO: display error message on permission denied\n    else {\n      console.log(\"Permission denied\");\n    }\n  }\n\n  const handleShowMenu = (evt) => {\n    evt.preventDefault();\n    setShowMenu(true);\n  }\n\n  const handleRegisterUser = async (evt, userObject) => {\n    evt.preventDefault();\n    let success = await auth.register(userObject);\n    if (success) {\n      setShowMenu(false);\n    }\n\n    // TODO: display error message on permission denied\n    else {\n      console.log(\"Unable to create new account\");\n    }\n  }\n\n  return (\n    <div>\n      <div>\n        <form onSubmit={evt => handleLogin(evt)}>\n          <label>\n            <input type=\"text\" name=\"username\" value={username} placeholder=\"username\" onChange={(evt) => setUsername(evt.target.value)} />\n          </label>\n          <label>\n            <input type=\"password\" name=\"password\" value={password} placeholder=\"password\" onChange={(evt) => setPassword(evt.target.value)} />\n          </label>\n          <input type=\"submit\" value=\"Login\" />\n        </form>\n      </div>\n      <div>\n        <form onSubmit={evt => handleShowMenu(evt)}>\n          <input type=\"submit\" value=\"Create New Account\" />\n        </form>\n      </div>\n      <RegisterUserMenu show={showMenu} onHide={()=> setShowMenu(false)} onRegister={handleRegisterUser} />\n    </div>\n  );\n}\n\n/**\n *\n * @param onRegister\n * @param rest\n * @return {JSX.Element}\n * @constructor\n */\nfunction RegisterUserMenu({onRegister, ...rest}) {\n\n  const [first, setFirst] = useState(\"\");\n  const [last, setLast] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  return (\n    <Modal\n      {...rest}\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\" centered>\n          Sign Up\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <form onSubmit={evt => onRegister(evt, {first, last, email, username, password})}>\n          <div>\n            <InputGroup>\n              <FormControl\n                  type=\"text\"\n                  name=\"first\"\n                  value={first}\n                  placeholder=\"Ex. John\"\n                  onChange={(evt) => setFirst(evt.target.value)}\n              />\n            </InputGroup>\n          </div>\n          <div>\n            <InputGroup>\n              <FormControl\n                  type=\"text\"\n                  name=\"last\"\n                  value={last}\n                  placeholder=\"Ex. Doe\"\n                  onChange={(evt) => setLast(evt.target.value)}\n              />\n            </InputGroup>\n          </div>\n          <div>\n            <InputGroup>\n              <FormControl\n                  type=\"text\"\n                  name=\"email\"\n                  value={email}\n                  placeholder=\"Ex. John@Doe.com\"\n                  onChange={(evt) => setEmail(evt.target.value)}\n              />\n            </InputGroup>\n          </div>\n          <div>\n            <InputGroup>\n              <FormControl\n                  type=\"text\"\n                  name=\"username\"\n                  value={username}\n                  placeholder=\"Ex. johndoe\"\n                  onChange={(evt) => setUsername(evt.target.value)}\n              />\n            </InputGroup>\n          </div>\n          <div>\n            <InputGroup>\n              <FormControl\n                  type=\"password\"\n                  name=\"password\"\n                  value={password}\n                  placeholder=\"...\"\n                  onChange={(evt) => setPassword(evt.target.value)}\n              />\n            </InputGroup>\n          </div>\n          <div>\n            <input type=\"submit\" value=\"Sign Up\" />\n          </div>\n        </form>\n      </Modal.Body>\n    </Modal>\n  );\n}\n","import React, {\n  useState,\n  useContext,\n  createContext\n} from \"react\";\n\n/**\n * Purpose: handles concerns regarding accessing the\n * user's information (login, contacts, etc)\n */\nconst core = {\n  coreObject: null,\n  async getCore() {\n    let response = await fetch(\"/api/core\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Credentials': 'include'\n      }\n    })\n    .then(response => response.json())\n    .catch(err => {\n\n      if (err.status === 401) {\n        return null;\n      }\n    });\n\n    return response;\n  },\n\n  /*\n  addContact(contactObject) {\n    return fetch(\"/api/contact/add\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Credentials': 'include'\n      },\n      body: JSON.stringify(contactObject)\n    })\n    // TODO: change to response.json() once backend sends back object\n    .then(response => true)\n    .catch(err => false);\n  },\n\n   */\n  /**\n   * @param contactObject - includes: first name, last name, etc,\n   * which comes from the user's input within the pop-up modal. The\n   * object is created in filter-bar.js then routed here.\n   * @return returns the result of the fetch, or null if the\n   * add was unsuccessful.\n   *\n   * purpose: to contact the backend (which, in turn, contacts the\n   * database to add the contact) with the contact object provided\n   * via filter-bar.js\n   */\n  addContact(contactObject) {\n    let result = fetch(\"/api/contact/add\", {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(contactObject)\n    })\n        .then(response => response.json())\n        .catch(err => {\n          if (err.status === 401) {\n            alert(\"Cannot add new contact. Please try again later.\");\n            return null;\n          }\n        });\n    return result;\n  },\n\n  /**\n   * @param contactObject - includes changes the user made\n   * in the expanded viewing of their contacts. May or may not include\n   * every field listed in filter-bar.js; depends on changes user made.\n   * @return returns the result of the fetch, or null if the\n   * update was unsuccessful.\n   *\n   * purpose: to contact the backend (which, in turn, contacts the\n   * database to update the contact) with the contact object provided\n   * from the edits within the expanded contact view\n   */\n  updateContact(contactObject) {\n    return fetch(\"/api/contact/update\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Credentials': 'include'\n      },\n      body: JSON.stringify(contactObject)\n    })\n    .then(response => true)\n    .catch(err => false);\n  },\n\n  /**\n   * @param contactObject - includes the information of the\n   * contact the user wishes to delete\n   * @return returns the result of the fetch, or null if the\n   * delete was unsuccessful.\n   *\n   * purpose: to contact the backend (which, in turn, contacts the\n   * database to delete the contact) with the contact object provided\n   */\n  deleteContact(contactObject) {\n    return fetch(\"/api/contact/delete\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Credentials': 'include'\n      },\n      body: JSON.stringify(contactObject)\n    })\n    .then(response => true)\n    .catch(err => false);\n  }\n};\n\nconst coreContext = createContext();\n\n/**\n * @return returns the core object itself.\n *\n * purpose: to get the user's core object which is needed\n * in nearly all functionalities of the web app\n */\nexport function ProvideCore({ children }) {\n  const core = useProvideCore();\n\n  return (\n    <coreContext.Provider value={core}>\n      { children }\n    </coreContext.Provider>\n  );\n}\n\nexport const useCore = () => {\n  return useContext(coreContext);\n};\n\n/**\n * @return returns results from core fetch, add contact,\n * delete contact, modify contact, and the core object itself.\n *\n * purpose: to allow user information to be fetched and handled\n * using the core object.\n */\nfunction useProvideCore() {\n\n  const [coreObject, setCoreObject] = useState(null);\n\n  /**\n   * @return returns the result from the attempt to get the core. If\n   * the attempt was successful then it will return the core, if not it\n   * will return null.\n   *\n   * purpose: to fetch the core which has the information tied to a\n   * registered user; core is used when accessing, adding,\n   * modifying, listing, etc\n   */\n  const getCore = () => {\n    return core.getCore()\n    .then(response => {\n      if (response === null) {\n        return null;\n      }\n\n      setCoreObject(response);\n      return response;\n    });\n  };\n\n  /**\n   * @param contactObject - includes: first name, last name, etc,\n   * which comes from the user's input within the pop-up modal. The\n   * object is created in filter-bar.js then routed here.\n   * @return returns didAdd which is the result from the addContact\n   * work above, and logs whether core.addContact was successful or not.\n   *\n   * purpose: to contact core addContact work that contacts the backend.\n   * This is primarily used for routing and updating core object.\n   */\n  const addContact = (contactObject) => {\n    let didAdd = core.addContact(contactObject);\n    if (didAdd) {\n      console.log(\"success\");\n    }\n    else {\n      console.log(\"error\");\n    }\n    /*\n    return core.addContact(contactObject)\n    .then(didAdd => {\n      if (didAdd) {\n        console.log(\"success\");\n        // TODO: udpate core object\n      }\n      else {\n        console.log(\"error\");\n        // TODO: handle add error\n      }\n    });\n     */\n    return didAdd;\n  };\n\n\n  /**\n   * @param contactObject - includes changes the user made\n   * in the expanded viewing of their contacts. May or may not include\n   * every field listed in filter-bar.js; depends on changes user made.\n   * @return returns didUpdate which is the result from the updateContact\n   * work above, and logs whether core.updateContact was successful or not.\n   *\n   * purpose: to contact core updateContact work that contacts the backend.\n   * This is primarily used for routing and updating core object.\n   */\n  const updateContact = (contactObject) => {\n    return core.updateContact(contactObject)\n    .then(didUpdate => {\n      if (didUpdate) {\n        console.log(\"success\");\n        // TODO: update core object\n      }\n      else {\n        console.log(\"error\");\n        // TODO: handle update error\n      }\n    });\n  };\n\n  /**\n   * @param contactObject - includes information of the contact the\n   * user wishes to delete.\n   * @return returns didDelete which is the result from the deleteContact\n   * work above, and logs whether core.deleteContact was successful or not.\n   *\n   * purpose: to contact core deleteContact work that contacts the backend.\n   * This is primarily used for routing and updating core object.\n   */\n  const deleteContact = (contactObject) => {\n    return core.deleteContact(contactObject)\n    .then(didDelete => {\n      if (didDelete) {\n        console.log(\"success\");\n        // TODO: update core object\n      }\n      else {\n        console.log(\"error\");\n        // TODO: handle delete error\n      }\n    });\n  };\n\n  return {\n    coreObject,\n    getCore,\n    addContact,\n    updateContact,\n    deleteContact\n  };\n}\n","import React from 'react'\n\n/**\n *\n * @param input\n * @param setKeyword\n * @return {JSX.Element}\n * @constructor\n */\nexport default function SearchBar({input, setKeyword}) {\n  return (\n    <span class=\"search-container\">\n      <input\n        className=\"Search-bar\"\n        key=\"random1\"\n        value={input}\n        placeholder={\" Search..\"}\n        onChange={(e) => setKeyword(e.target.value)}\n      />\n  </span>\n  );\n}","import React, {useState} from 'react'\nimport './App.css';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\nimport Button from 'react-bootstrap/esm/Button';\nimport { useCore } from './use-core.js';\nimport SearchBar from './search-bar';\n\n/**\n *\n */\nexport class FullContact extends React.Component {\n  render() {\n    return (\n      <div >\n        <div className=\"Email\">\n          <span classname=\"email\">Email: {this.props.email}</span>\n        </div>\n        <div className=\"PhoneNumber\">\n          <span classname=\"number\">Phone Number: {this.props.phoneNumber}</span>\n        </div>\n        <div className=\"Company\">\n          <span classname=\"company\">Company: {this.props.company}</span>\n        </div>\n        <div className=\"DateMet\">\n          <span classname=\"dateMet\">Date Met: {this.props.dateMet}</span>\n        </div>\n        <div className=\"DateLastInteracted\">\n          <span classname=\"dateLastInteracted\">Last Contacted: {this.props.dateLastInteracted}</span>\n        </div>\n        <div className=\"School\">\n          <span classname=\"school\">School: {this.props.schoolAttended}</span>\n        </div>\n        <div className=\"Notes\">\n          <span classname=\"notes\">Notes: {this.props.notes}</span>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport class Name extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { active: false}\n  }\n\n  toggleClass=() => {\n    const list = this.props.value;\n    if(list == true){\n      this.setState({\n        active: !this.state.active\n      }) \n    } \n  };\n  render() {\n    return (\n      <div >\n        <div className=\"Name\" onClick={this.toggleClass}>\n          <span className=\"first\"> {this.props.first} </span>\n          <span className=\"last\"> {this.props.last} </span>\n        </div>\n        <div>\n          {(this.state.active && this.props.value)\n          ? <FullContact {... this.props} />: null}\n        </div>\n      </div>\n    );\n  }\n}\n\n/**\n *\n * @param props\n * @return {JSX.Element}\n * @constructor\n */\nexport function ToggleButtonGroupControlled(props){\n  const [value, setVal] = useState(true);\n  const toggleClass = () => {setVal((value, props) => !value);};\n  let core = useCore();\n  const contacts = core.coreObject.networkObject.contacts;\n\n  const [input, setInput] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const updateInput = async (input) => {\n    const filtered = contacts.filter(contact => {\n      let full_name = contact.first + ' ' + contact.last\n      let options = full_name + ' ' + contact.email + ' ' + contact.company + ' ' + contact.schoolAttended\n      return options.toLowerCase().includes(input.trim().toLowerCase())\n    })\n    setInput(input);\n    setSearchTerm(filtered);\n  }\n\n   return(\n      <div>\n        <div>\n          <ToggleButtonGroup type=\"radio\" name=\"options\" defaultValue={true} onChange={toggleClass}>\n            <ToggleButton variant='dark' value={true} checked={true}>List Format</ToggleButton>\n            <ToggleButton variant='dark' value={false} checked={false}>Grid Format</ToggleButton>\n          </ToggleButtonGroup>\n          <span>\n            <SearchBar\n              input={input}       \n              setKeyword={updateInput}\n            />\n          </span>\n        </div>\n        <div className = {value? \"Contact-list\":\"Grid-contact-container\"} >\n            {searchTerm ? \n              searchTerm.map((cont, i) =>(\n                <div className = {value? \"Contact\":\"Grid-contact\"} >\n                  <Name {...cont} value={value} key={i} />\n                  {!value? <FullContact {...cont}/>: null}\n                </div>)) \n              : contacts.map((cont, i) =>(\n              <div className = {value? \"Contact\":\"Grid-contact\"} >\n                <Name {...cont} value={value} key={i} />\n                {!value? <FullContact {...cont}/>: null}\n              </div>\n            ))}\n        </div>\n      </div>\n      );\n}\n\n/**\n *\n */\nexport default class ContactList extends React.Component {\n  render() {\n    return (\n      <div>\n         <ToggleButtonGroupControlled/>\n      </div>\n    )\n  }\n}","export default __webpack_public_path__ + \"static/media/mpn_logo.842bc77f.png\";","import React from 'react'\nimport { useAuth } from './use-auth'\nimport Button from \"react-bootstrap/Button\";\nimport logo from './mpn_logo.png';\n\n/**\n *\n * @param props\n * @return {JSX.Element}\n * @constructor\n */\nexport default function NavBar(props) {\n\n  const auth = useAuth();\n\n  const handleLogout = async () => {\n    let response = await auth.logout();\n    if (response) {\n      // successful logout\n    }\n    else {\n      // UNsuccessful logout\n    }\n  };\n\n  return (\n    <div className=\"Nav-bar\">\n        <img alt=\"logo\" className=\"NetworkLogo\" src={logo} />\n        <div>\n            <span>\n                <Button variant=\"info\" onClick={handleLogout}>\n                    Sign Out\n                </Button>\n            </span>\n        </div>\n    </div>\n  )\n}","import InputGroup from 'react-bootstrap/InputGroup';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\nimport React, {useState} from \"react\";\nimport { useCore } from \"./use-core.js\"\n\n/**\n * @param props\n * @return returns the rendering of the add contact\n * button and the input modal\n * @constructor\n *\n * Purpose: this function handles user input in regards to\n * adding contacts. It renders the pop-up modal which allows\n * the user to enter information for a given contact they\n * wish to save in their personal network\n */\nexport default function Filterbar(props) {\n\n  /* variables to hold user input field values */\n  const [firstname, setFirstname] = useState(\"\");\n  const [lastname, setLastname] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [company, setCompany] = useState(\"\");\n  const [role, setRole] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [school, setSchool] = useState(\"\");\n  const [notes, setNotes] = useState(\"\");\n  const core = useCore();\n\n  /* modal handling */\n  const [show, setShow] = useState(false);\n  const handleShow = () => setShow(true);\n  const handleClose = () => {\n    setShow(false);\n    clearFields();\n  }\n\n  /**\n   * Purpose: to clear fields after successful submission and\n   * handling of newly entered contact information; to ensure\n   * the modal input fields are clear, and ready for the next\n   * time a contact is added.\n   */\n  const clearFields = () => {\n    setFirstname('')\n    setLastname('')\n    setEmail('')\n    setPhone('')\n    setCompany('')\n    setRole('')\n    setDate('')\n    setSchool('')\n    setNotes('')\n  }\n\n  /**\n   * @param evt - a trigger that sends the signal to initiate\n   * the new contact submission process.\n   * @return {Promise<void>}\n   *\n   * Purpose: to create a contact object with the user's newly\n   * entered contact information, then send it to use-core.js\n   * which contacts the database. The results from use-core.js\n   * will dictate whether the user is notified of a successful\n   * add or an unsuccessful one.\n   */\n  const handleSubmit = async (evt) => {\n    evt.preventDefault();\n    const addContactObj = {\n      \"_id\": \"\",\n      \"groups\": \"\",\n      \"first\": firstname,\n      \"last\": lastname,\n      \"email\": email,\n      \"phone\": phone,\n      \"company\": company,\n      \"role\": role,\n      \"dateMet\": date,\n      \"dateLastInteracted\": \"\",\n      \"schoolAttended\": school,\n      \"notes\": notes\n    }\n\n    /* send contact obj to use-core.js & wait for result */\n    let result = core.addContact(addContactObj);\n    if (result) {\n      /* good add */\n      alert(\"New contact added to your network!\");\n    }\n    else {\n      /* bad add */\n      console.log(\"Cannot process request.\");\n    }\n    handleClose();\n  }\n\n\n  //implement on onChange function for toggle button\n  \n  /**\n   * Purpose: renders pop-up modal and buttons. It\n   * also receives the user's input to the fields and\n   * directs it to the proper variable to contain the given\n   * value.\n   */\n  return (\n      <div className=\"Contact-buttons\">\n        <ButtonToolbar>\n          <ButtonGroup className=\"mr-2\" >\n            <DropdownButton variant=\"dark\" id=\"dropdown-basic-button\" title=\"Sort By\">\n              <Dropdown.Item href=\"#/action-1\">First Name A-Z</Dropdown.Item>\n              <Dropdown.Item href=\"#/action-2\">Last Name A-Z</Dropdown.Item>\n              <Dropdown.Item href=\"#/action-3\">Role A-Z</Dropdown.Item>\n              <Dropdown.Item href=\"#/action-4\">Company A-Z</Dropdown.Item>\n              <Dropdown.Item href=\"#/action-5\">Newly Added</Dropdown.Item>\n            </DropdownButton>\n            <Button variant=\"outline-dark\" onClick={handleShow}>\n              Add Contact\n            </Button>\n          </ButtonGroup>\n        </ButtonToolbar>\n        <>\n          <Modal show={show} onHide={handleClose}>\n            <Modal.Header closeButton>\n              <Modal.Title>Modal heading</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              <form onSubmit={evt => handleSubmit(evt)}>\n                <div>\n                  <div>\n                    <InputGroup>\n                      <FormControl\n                          type=\"text\"\n                          name=\"firstname\"\n                          value={firstname}\n                          placeholder=\"Ex. John\"\n                          onChange={(evt) => setFirstname(evt.target.value)}\n                      />\n                    </InputGroup>\n                  </div>\n                  <label>First Name</label>\n                </div>\n                <div>\n                  <div>\n                    <InputGroup>\n                      <FormControl\n                          type=\"text\"\n                          name=\"lastname\"\n                          value={lastname}\n                          placeholder=\"Ex. Doe\"\n                          onChange={(evt) => setLastname(evt.target.value)}\n                      />\n                    </InputGroup>\n                  </div>\n                  <label>Last Name</label>\n                </div>\n                <div>\n                  <div>\n                    <InputGroup>\n                      <FormControl\n                          type=\"text\"\n                          name=\"email\"\n                          value={email}\n                          placeholder=\"Ex. Name@example.com\"\n                          onChange={(evt) => setEmail(evt.target.value)}\n                      />\n                    </InputGroup>\n                  </div>\n                  <label>Email</label>\n                </div>\n                <div>\n                  <div>\n                    <InputGroup>\n                      <FormControl\n                          type=\"text\"\n                          name=\"phone\"\n                          value={phone}\n                          placeholder=\"Ex. (000)000-0000\"\n                          onChange={(evt) => setPhone(evt.target.value)}\n                      />\n                    </InputGroup>\n                  </div>\n                  <label>Phone</label>\n                </div>\n                <div>\n                  <div>\n                    <InputGroup>\n                      <FormControl\n                          type=\"text\"\n                          name=\"company\"\n                          value={company}\n                          placeholder=\"Ex. Google\"\n                          onChange={(evt) => setCompany(evt.target.value)}\n                      />\n                    </InputGroup>\n                  </div>\n                  <label>Company</label>\n                </div>\n                <div>\n                  <div>\n                    <InputGroup>\n                      <FormControl\n                          type=\"text\"\n                          name=\"role\"\n                          value={role}\n                          placeholder=\"Ex. Software Engineer\"\n                          onChange={(evt) => setRole(evt.target.value)}\n                      />\n                    </InputGroup>\n                  </div>\n                  <label>Role</label>\n                </div>\n                <div>\n                  <div>\n                    <InputGroup>\n                      <FormControl\n                          type=\"date\"\n                          name=\"date\"\n                          value={date}\n                          placeholder=\"Ex. 00/00/0000\"\n                          onChange={(evt) => setDate(evt.target.value)}\n                      />\n                    </InputGroup>\n                  </div>\n                  <label>Date Met</label>\n                </div>\n                <div>\n                  <div>\n                    <InputGroup>\n                      <FormControl\n                          type=\"text\"\n                          name=\"school\"\n                          value={school}\n                          placeholder=\"Ex. UCLA\"\n                          onChange={(evt) => setSchool(evt.target.value)}\n                      />\n                    </InputGroup>\n                  </div>\n                  <label>School Attended</label>\n                </div>\n                <div>\n                  <Form.Group>\n                    <Form.Control\n                        as=\"textarea\" rows={3}\n                        type=\"textarea\"\n                        name=\"notes\"\n                        value={notes}\n                        placeholder=\"Ex. Introduced by ...\"\n                        onChange={(evt) => setNotes(evt.target.value)}\n                    />\n                  </Form.Group>\n                  <label>General Notes</label>\n                </div>\n              </form>\n            </Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"secondary\" onClick={handleClose}>\n                Close\n              </Button>\n              <Button variant=\"primary\" onClick={evt => handleSubmit(evt)}>\n                Save Changes\n              </Button>\n            </Modal.Footer>\n          </Modal>\n        </>\n      </div>\n  );\n}\n","/**\n *\n * @param props\n * @return {JSX.Element}\n * @constructor\n */\nexport default function LoadingPage(props) {\n\n  return (\n    <div>Loading...</div>\n  );\n}\n","import React, { useEffect, useState } from 'react'\n\n// user-defined components\nimport ContactList from './contact-list'\nimport NavBar from './navigation-bar'\nimport FilterBar from './filter-bar'\nimport { useCore } from './use-core'\nimport LoadingPage from './loading-page'\n\n/**\n *\n * @param props\n * @return {JSX.Element}\n * @constructor\n */\nexport default function Home(props) {\n\n  const [loading, setLoading] = useState(true);\n\n  const core = useCore();\n\n  useEffect(() => {\n\n    setLoading(true);\n\n    const retrieveCore = async () => {\n      let response = await core.getCore();\n      if (! core) {\n        // console.log(\"didn't work\");\n      }\n      else {\n        // console.log(core.coreObject);\n      }\n\n      setLoading(false);\n    };\n\n    retrieveCore();\n  }, []);\n\n  return (\n\n    loading ? (\n      <LoadingPage />\n    ) : (\n      <div className=\"Home\">\n        <header className=\"App-header\">\n          <NavBar />\n          <FilterBar />\n          <ContactList />\n        </header>\n      </div>\n    )\n  )\n}\n","import React, { useEffect, useState } from 'react';\nimport { useAuth } from './use-auth';\nimport Login from './login';\nimport Home from './home';\nimport { ProvideCore } from './use-core';\nimport LoadingPage from './loading-page';\n\n/**\n *\n * @param props\n * @return {JSX.Element}\n * @constructor\n */\nexport default function AuthenticationRouting(props) {\n\n  const [loading, setLoading] = useState(true);\n\n  const auth = useAuth();\n\n  useEffect(() => {\n\n    setLoading(true);\n\n    const refreshPage = async () => {\n      let response = await auth.refresh();\n      if (! response) {\n        // console.log(\"refresh didn't work\");\n      }\n      else {\n        // console.log(\"refresh worked\");\n        // console.log(response);\n      }\n\n      setLoading(false);\n    };\n\n    refreshPage();\n  }, []);\n\n  return (\n    loading ? (\n      <LoadingPage />\n    ) : (\n      auth.user ? (\n        <ProvideCore>\n          <Home />\n        </ ProvideCore>\n      ) : (\n        <Login />\n      )\n    )\n  );\n}\n","import React from 'react';\n\n// user-defined components\nimport AuthenticationRouting from './authentication-routing';\nimport { ProvideAuth } from './use-auth';\n\n// CSS\nimport './App.css';\n\n/**\n *\n * @param props\n * @return {JSX.Element}\n * @constructor\n */\nfunction App(props) {\n  return (\n    <ProvideAuth>\n      <AuthenticationRouting />\n    </ProvideAuth>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}